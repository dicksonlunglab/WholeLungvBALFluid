knitr::opts_chunk$set(echo = FALSE, # whether code should be displayed in document
cache = TRUE, # whether to cache results of code chunks for future knits
fig.align = 'center', # alignment options: 'left', 'right', 'center', 'default'
error = TRUE, # display error messages in document (TRUE) or stop render on error (FALSE)
warning = FALSE,
message=FALSE,
comment = FALSE,
results= "hold"
)
# Libaries used in this analysis
# I. universal data wrangling and visualization
library(tidyverse)      # ggplot, dplyr, purrr, forcats, stringr, etc. See https://tidyverse.tidyverse.org/
library(tidyselect)     # useful for subsetting dataframes
# II. formatting, plotting
library(scales)         # used in formatting relative abundance % labels; dollar_format()
library(knitr)          # necessary for kable, for displaying nicer tables in html/pdf output
library(RColorBrewer)   # for generating custom palettes
library(ggplot2)        # customizable data visualization
library(ggpubr)         # data visualization, built on ggplot2
# III. analysis packages
library(vegan)          # decostand(), metaMDS(), scores(), rda(), ordispider(), adonis()
# IV. functions for automating and streamlining workflow
#library(devtools)
#devtools::install_github("https://github.com/cb-42/cbmbtools")
library(cbmbtools)
# functions for computing summary statistics; from John
# Error bar helper
sem <- function(x){
sqrt(var(x, na.rm = TRUE)/length(na.omit(x)))
}
ddpcr <- read.csv("WholeLung_v_BALF_16S_ddPCR_quantification.csv", header=T, stringsAsFactors = T)
colnames(ddpcr) <- c("Sample", "Gene_16S_copies_per_mL")
ddpcr <- mutate(ddpcr, Sample_Type = factor(case_when(
str_detect(Sample, "BAL_") ~ "BAL",
str_detect(Sample, "Lung_") ~ "Lung",
str_detect(Sample, "PBS_") ~ "PBS",
str_detect(Sample, "HomogCtrl_") ~ "Homog_Ctrl",
str_detect(Sample, "_RINSE") ~ "Syringe_Rinse",
str_detect(Sample, "IsoCtrl") ~ "Iso_Ctrl",
str_detect(Sample, "NTC") ~ "NTC"
), levels = c("NTC", "Iso_Ctrl", "PBS", "Syringe_Rinse", "Homog_Ctrl", "BAL", "Lung")
)
) %>%
dplyr::select(Sample_Type, everything())
View(ddpcr)
#data prep for pretty version
ddpcr <- ddpcr %>% group_by(Sample_Type)
ddpcr.summary <- summarize(ddpcr,
Mean=mean(Gene_16S_copies_per_mL),
SEM=sqrt(var(Gene_16S_copies_per_mL)/length(Gene_16S_copies_per_mL)))
ggplot(ddpcr, aes(x=Sample_Type)) +
geom_col(data=ddpcr.summary, aes(x=Sample_Type, y=Mean, fill=Sample_Type), color= "black", show.legend = FALSE) +
geom_point(aes(x=Sample_Type, y=Gene_16S_copies_per_mL)) +
geom_errorbar(data=ddpcr.summary, aes(ymin = Mean-SEM, ymax = Mean+SEM, width = 0.3)) +
theme_classic() +
scale_y_log10(
limits = c(10^0, 10^6),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)), expand = c(0,0)) +
theme(axis.text.y = element_text(size=12),
axis.text.x = element_text(size=10),
axis.title.y = element_text(size=12, face="bold", angle = 0, vjust=0.5),
axis.title.x = element_text(size=12, face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) +
ylab("16S rRNA Gene\nCopies/mL") +
xlab("\nSample Type")
#overall difference between groups - kruskal wallis test for multiple group comparisons
kruskal.test(Gene_16S_copies_per_mL ~ Sample_Type, data=ddpcr)
#pairwise difference between groups - Wilcoxon rank sum test, adjusted for multiple comparisons
pairwise.wilcox.test(ddpcr$Gene_16S_copies_per_mL, ddpcr$Sample_Type, p.adjust.method = "BH")
miseq_reads <- read.csv("WholeLung_v_BALF_MiSeq_Reads_Final.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
View(miseq_reads)
# IV. functions for automating and streamlining workflow
library(devtools)
devtools::install_github("https://github.com/cb-42/cbmbtools")
cbmbtools::load_shared
devtools::install_github("https://github.com/cb-42/cbmbtools")
force = TRUE
devtools::install_github("https://github.com/cb-42/cbmbtools", force = T)
knitr::opts_chunk$set(echo = FALSE, # whether code should be displayed in document
cache = TRUE, # whether to cache results of code chunks for future knits
fig.align = 'center', # alignment options: 'left', 'right', 'center', 'default'
error = TRUE, # display error messages in document (TRUE) or stop render on error (FALSE)
warning = FALSE,
message=FALSE,
comment = FALSE,
results= "hold"
)
# Libaries used in this analysis
# I. universal data wrangling and visualization
library(tidyverse)      # ggplot, dplyr, purrr, forcats, stringr, etc. See https://tidyverse.tidyverse.org/
library(tidyselect)     # useful for subsetting dataframes
# II. formatting, plotting
library(scales)         # used in formatting relative abundance % labels; dollar_format()
library(knitr)          # necessary for kable, for displaying nicer tables in html/pdf output
library(RColorBrewer)   # for generating custom palettes
library(ggplot2)        # customizable data visualization
library(ggpubr)         # data visualization, built on ggplot2
# III. analysis packages
library(vegan)          # decostand(), metaMDS(), scores(), rda(), ordispider(), adonis()
# IV. functions for automating and streamlining workflow
library(devtools)
devtools::install_github("https://github.com/cb-42/cbmbtools")
library(cbmbtools)
# functions for computing summary statistics; from John
# Error bar helper
sem <- function(x){
sqrt(var(x, na.rm = TRUE)/length(na.omit(x)))
}
ddpcr <- read.csv("WholeLung_v_BALF_16S_ddPCR_quantification.csv", header=T, stringsAsFactors = T)
colnames(ddpcr) <- c("Sample", "Gene_16S_copies_per_mL")
ddpcr <- mutate(ddpcr, Sample_Type = factor(case_when(
str_detect(Sample, "BAL_") ~ "BAL",
str_detect(Sample, "Lung_") ~ "Lung",
str_detect(Sample, "PBS_") ~ "PBS",
str_detect(Sample, "HomogCtrl_") ~ "Homog_Ctrl",
str_detect(Sample, "_RINSE") ~ "Syringe_Rinse",
str_detect(Sample, "IsoCtrl") ~ "Iso_Ctrl",
str_detect(Sample, "NTC") ~ "NTC"
), levels = c("NTC", "Iso_Ctrl", "PBS", "Syringe_Rinse", "Homog_Ctrl", "BAL", "Lung")
)
) %>%
dplyr::select(Sample_Type, everything())
#data prep for pretty version
ddpcr <- ddpcr %>% group_by(Sample_Type)
ddpcr.summary <- summarize(ddpcr,
Mean=mean(Gene_16S_copies_per_mL),
SEM=sqrt(var(Gene_16S_copies_per_mL)/length(Gene_16S_copies_per_mL)))
ggplot(ddpcr, aes(x=Sample_Type)) +
geom_col(data=ddpcr.summary, aes(x=Sample_Type, y=Mean, fill=Sample_Type), color= "black", show.legend = FALSE) +
geom_point(aes(x=Sample_Type, y=Gene_16S_copies_per_mL)) +
geom_errorbar(data=ddpcr.summary, aes(ymin = Mean-SEM, ymax = Mean+SEM, width = 0.3)) +
theme_classic() +
scale_y_log10(
limits = c(10^0, 10^6),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)), expand = c(0,0)) +
theme(axis.text.y = element_text(size=12),
axis.text.x = element_text(size=10),
axis.title.y = element_text(size=12, face="bold", angle = 0, vjust=0.5),
axis.title.x = element_text(size=12, face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) +
ylab("16S rRNA Gene\nCopies/mL") +
xlab("\nSample Type")
#overall difference between groups - kruskal wallis test for multiple group comparisons
kruskal.test(Gene_16S_copies_per_mL ~ Sample_Type, data=ddpcr)
# Kruskal-Wallis rank sum test
#
# data:  Gene_16S_copies_per_mL by Sample_Type
# Kruskal-Wallis chi-squared = 30.451, df = 6, p-value = 3.227e-05
#pairwise difference between groups - Wilcoxon rank sum test, adjusted for multiple comparisons
pairwise.wilcox.test(ddpcr$Gene_16S_copies_per_mL, ddpcr$Sample_Type, p.adjust.method = "BH")
# Pairwise comparisons using Wilcoxon rank sum test
#
# data:  ddpcr$Gene_16S_copies_per_mL and ddpcr$Sample_Type
#
#               NTC     Iso_Ctrl PBS     Syringe_Rinse Homog_Ctrl BAL
# Iso_Ctrl      0.64000 -        -       -             -          -
# PBS           0.58947 0.40000  -       -             -          -
# Syringe_Rinse 0.42353 0.03333  0.40000 -             -          -
# Homog_Ctrl    0.58947 0.16667  0.42353 0.40000       -          -
# BAL           0.22238 0.00734  0.31818 0.27082       0.90909    -
# Lung          0.00734 0.00170  0.06731 0.00734       0.06731    0.00012
#
# P value adjustment method: BH
miseq_reads <- read.csv("WholeLung_v_BALF_MiSeq_Reads_Final.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
cbmbtools::load_shared
load_shared
?cbmbtools
?cbmbtools::load_shared
load_shared
