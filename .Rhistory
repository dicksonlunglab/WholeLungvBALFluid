# Libaries used in this analysis
# I. universal data wrangling and visualization
library(tidyverse)      # ggplot, dplyr, purrr, forcats, stringr, etc. See https://tidyverse.tidyverse.org/
library(tidyselect)     # useful for subsetting dataframes
# II. formatting, plotting
library(scales)         # used in formatting relative abundance % labels; dollar_format()
library(knitr)          # necessary for kable, for displaying nicer tables in html/pdf output
library(RColorBrewer)   # for generating custom palettes
library(ggplot2)        # customizable data visualization
library(ggpubr)         # data visualization, built on ggplot2
# III. analysis packages
library(vegan)          # decostand(), metaMDS(), scores(), rda(), ordispider(), adonis()
# IV. functions for automating and streamlining workflow
#library(devtools)
#devtools::install_github("https://github.com/cb-42/cbmbtools")
library(cbmbtools)
#V. Rmarkdown formatting
library(pander)
library(tadaatoolbox)
pander(sessionInfo())
# functions for computing summary statistics; from John
# Error bar helper
sem <- function(x){
sqrt(var(x, na.rm = TRUE)/length(na.omit(x)))
}
ddpcr <- read.csv("WholeLung_v_BALF_16S_ddPCR_quantification.csv", header=T, stringsAsFactors = T)
colnames(ddpcr) <- c("Sample", "Gene_16S_copies_per_mL")
ddpcr <- mutate(ddpcr, Sample_Type = factor(case_when(
str_detect(Sample, "BAL_") ~ "BAL",
str_detect(Sample, "Lung_") ~ "Lung",
str_detect(Sample, "PBS_") ~ "PBS",
str_detect(Sample, "HomogCtrl_") ~ "Homog_Ctrl",
str_detect(Sample, "_RINSE") ~ "Syringe_Rinse",
str_detect(Sample, "IsoCtrl") ~ "Iso_Ctrl",
str_detect(Sample, "NTC") ~ "NTC"
), levels = c("NTC", "Iso_Ctrl", "PBS", "Syringe_Rinse", "Homog_Ctrl", "BAL", "Lung")
)
) %>%
dplyr::select(Sample_Type, everything())
#data prep
ddpcr <- ddpcr %>% group_by(Sample_Type)
ddpcr.summary <- summarize(ddpcr,
Mean=mean(Gene_16S_copies_per_mL),
SEM=sqrt(var(Gene_16S_copies_per_mL)/length(Gene_16S_copies_per_mL)))
#plot
ggplot(ddpcr, aes(x=Sample_Type)) +
geom_col(data=ddpcr.summary, aes(x=Sample_Type, y=Mean, fill=Sample_Type), color= "black", show.legend = FALSE) +
geom_point(aes(x=Sample_Type, y=Gene_16S_copies_per_mL)) +
geom_errorbar(data=ddpcr.summary, aes(ymin = Mean-SEM, ymax = Mean+SEM, width = 0.3)) +
theme_classic() +
scale_y_log10(
limits = c(10^0, 10^6),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)), expand = c(0,0)) +
theme(axis.text.y = element_text(size=12),
axis.text.x = element_text(size=10),
axis.title.y = element_text(size=12, face="bold", angle = 0, vjust=0.5),
axis.title.x = element_text(size=12, face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) +
ylab("16S rRNA Gene\nCopies/mL") +
xlab("\nSample Type")
knitr::opts_chunk$set(echo = FALSE, # whether code should be displayed in document
cache = TRUE, # whether to cache results of code chunks for future knits
fig.align = 'left', # alignment options: 'left', 'right', 'center', 'default'
error = TRUE, # display error messages in document (TRUE) or stop render on error (FALSE)
warning = FALSE,
message=FALSE,
comment = FALSE,
results= "hold"
)
# Libaries used in this analysis
# I. universal data wrangling and visualization
library(tidyverse)      # ggplot, dplyr, purrr, forcats, stringr, etc. See https://tidyverse.tidyverse.org/
library(tidyselect)     # useful for subsetting dataframes
# II. formatting, plotting
library(scales)         # used in formatting relative abundance % labels; dollar_format()
library(knitr)          # necessary for kable, for displaying nicer tables in html/pdf output
library(RColorBrewer)   # for generating custom palettes
library(ggplot2)        # customizable data visualization
library(ggpubr)         # data visualization, built on ggplot2
# III. analysis packages
library(vegan)          # decostand(), metaMDS(), scores(), rda(), ordispider(), adonis()
# IV. functions for automating and streamlining workflow
#library(devtools)
#devtools::install_github("https://github.com/cb-42/cbmbtools")
library(cbmbtools)
#V. Rmarkdown formatting
library(pander)
library(tadaatoolbox)
pander(sessionInfo())
# functions for computing summary statistics; from John
# Error bar helper
sem <- function(x){
sqrt(var(x, na.rm = TRUE)/length(na.omit(x)))
}
ddpcr <- read.csv("WholeLung_v_BALF_16S_ddPCR_quantification.csv", header=T, stringsAsFactors = T)
colnames(ddpcr) <- c("Sample", "Gene_16S_copies_per_mL")
ddpcr <- mutate(ddpcr, Sample_Type = factor(case_when(
str_detect(Sample, "BAL_") ~ "BAL",
str_detect(Sample, "Lung_") ~ "Lung",
str_detect(Sample, "PBS_") ~ "PBS",
str_detect(Sample, "HomogCtrl_") ~ "Homog_Ctrl",
str_detect(Sample, "_RINSE") ~ "Syringe_Rinse",
str_detect(Sample, "IsoCtrl") ~ "Iso_Ctrl",
str_detect(Sample, "NTC") ~ "NTC"
), levels = c("NTC", "Iso_Ctrl", "PBS", "Syringe_Rinse", "Homog_Ctrl", "BAL", "Lung")
)
) %>%
dplyr::select(Sample_Type, everything())
knitr::opts_chunk$set(echo = FALSE, # whether code should be displayed in document
cache = TRUE, # whether to cache results of code chunks for future knits
fig.align = 'left', # alignment options: 'left', 'right', 'center', 'default'
error = TRUE, # display error messages in document (TRUE) or stop render on error (FALSE)
warning = FALSE,
message=FALSE,
comment = FALSE,
results= "hold"
)
# Libaries used in this analysis
# I. universal data wrangling and visualization
library(tidyverse)      # ggplot, dplyr, purrr, forcats, stringr, etc. See https://tidyverse.tidyverse.org/
library(tidyselect)     # useful for subsetting dataframes
# II. formatting, plotting
library(scales)         # used in formatting relative abundance % labels; dollar_format()
library(knitr)          # necessary for kable, for displaying nicer tables in html/pdf output
library(RColorBrewer)   # for generating custom palettes
library(ggplot2)        # customizable data visualization
library(ggpubr)         # data visualization, built on ggplot2
# III. analysis packages
library(vegan)          # decostand(), metaMDS(), scores(), rda(), ordispider(), adonis()
# IV. functions for automating and streamlining workflow
#library(devtools)
#devtools::install_github("https://github.com/cb-42/cbmbtools")
library(cbmbtools)
#V. Rmarkdown formatting
library(pander)
library(tadaatoolbox)
pander(sessionInfo())
# functions for computing summary statistics; from John
# Error bar helper
sem <- function(x){
sqrt(var(x, na.rm = TRUE)/length(na.omit(x)))
}
ddpcr <- read.csv("WholeLung_v_BALF_16S_ddPCR_quantification.csv", header=T, stringsAsFactors = T)
colnames(ddpcr) <- c("Sample", "Gene_16S_copies_per_mL")
ddpcr <- mutate(ddpcr, Sample_Type = factor(case_when(
str_detect(Sample, "BAL_") ~ "BAL",
str_detect(Sample, "Lung_") ~ "Lung",
str_detect(Sample, "PBS_") ~ "PBS",
str_detect(Sample, "HomogCtrl_") ~ "Homog_Ctrl",
str_detect(Sample, "_RINSE") ~ "Syringe_Rinse",
str_detect(Sample, "IsoCtrl") ~ "Iso_Ctrl",
str_detect(Sample, "NTC") ~ "NTC"
), levels = c("NTC", "Iso_Ctrl", "PBS", "Syringe_Rinse", "Homog_Ctrl", "BAL", "Lung")
)
) %>%
dplyr::select(Sample_Type, everything())
#data prep
ddpcr <- ddpcr %>% group_by(Sample_Type)
ddpcr.summary <- summarize(ddpcr,
Mean=mean(Gene_16S_copies_per_mL),
SEM=sqrt(var(Gene_16S_copies_per_mL)/length(Gene_16S_copies_per_mL)))
ggplot(ddpcr, aes(x=Sample_Type)) +
geom_col(data=ddpcr.summary, aes(x=Sample_Type, y=Mean, fill=Sample_Type), color= "black", show.legend = FALSE) +
geom_point(aes(x=Sample_Type, y=Gene_16S_copies_per_mL)) +
geom_errorbar(data=ddpcr.summary, aes(ymin = Mean-SEM, ymax = Mean+SEM, width = 0.3)) +
theme_classic() +
scale_y_log10(
limits = c(10^0, 10^6),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)), expand = c(0,0)) +
theme(axis.text.y = element_text(size=12),
axis.text.x = element_text(size=10),
axis.title.y = element_text(size=12, face="bold", angle = 0, vjust=0.5),
axis.title.x = element_text(size=12, face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) +
ylab("16S rRNA Gene\nCopies/mL") +
xlab("\nSample Type")
#overall difference between groups - kruskal wallis test for multiple group comparisons
kruskal.test(Gene_16S_copies_per_mL ~ Sample_Type, data=ddpcr)
# Kruskal-Wallis rank sum test
# data:  Gene_16S_copies_per_mL by Sample_Type
# Kruskal-Wallis chi-squared = 30.451, df = 6, p-value = 3.227e-05
#pairwise difference between groups - Wilcoxon rank sum test, adjusted for multiple comparisons
pairwise.wilcox.test(ddpcr$Gene_16S_copies_per_mL, ddpcr$Sample_Type, p.adjust.method = "BH")
# Pairwise comparisons using Wilcoxon rank sum test
# data:  ddpcr$Gene_16S_copies_per_mL and ddpcr$Sample_Type
#               NTC     Iso_Ctrl PBS     Syringe_Rinse Homog_Ctrl BAL
# Iso_Ctrl      0.64000 -        -       -             -          -
# PBS           0.58947 0.40000  -       -             -          -
# Syringe_Rinse 0.42353 0.03333  0.40000 -             -          -
# Homog_Ctrl    0.58947 0.16667  0.42353 0.40000       -          -
# BAL           0.22238 0.00734  0.31818 0.27082       0.90909    -
# Lung          0.00734 0.00170  0.06731 0.00734       0.06731    0.00012
# P value adjustment method: BH
miseq_reads <- read.csv("WholeLung_v_BALF_MiSeq_Reads_Final.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
# Basic processing with selection of OTUs > 0.1 % of the population in each bacterial community
# Read in opti_mcc.shared
otu_good <- load_shared("WholeLung_v_BALF.shared")
# Trim _S from end of rownames(otu_good), inspect data, and convert to dataframe
rownames(otu_good) <- str_remove(rownames(otu_good), "_S\\d+_L001_R1_001") %>% str_remove("_S\\d+_L001_R1")
dim(otu_good) # dim(otu_good)[1] observations (samples) x dim(otu_good)[2] features (OTUs above .1% population threshold)
#[1] 120 773
otu_good <- as.data.frame(otu_good)
# II. Read in cons.taxonomy and inspect data
otu_good_taxonomy <- load_tax("WholeLung_v_BALF.cons.taxonomy", otu_good = otu_good)
dim(otu_good_taxonomy)
#[1] 773   7
#untrimmed dataset for diversity metrics
otu_raw <- read.table("WholeLung_v_BALF.shared", row.names = 2, header = T, stringsAsFactors = T)
otu_trim <- otu_raw[, -c(1:2)] # remove unnecessary columns
otu_untrimmed <- as.matrix(otu_trim) # convert to matrix
rownames(otu_untrimmed) <- str_remove(rownames(otu_untrimmed), "_S\\d+") # clean up sample names
otu_untrimmed <- as.data.frame(otu_untrimmed) # convert to dataframe
dim(otu_untrimmed) # inspect data
#[1]  120 3391
# Read in cons.taxonomy table for use with the untrimmed version of sequencing data & inspect data
otu_untrimmed_taxonomy <- load_tax("WholeLung_v_BALF.cons.taxonomy", otu_good = otu_untrimmed)
dim(otu_untrimmed_taxonomy)
#[1]  3391    7
###optional datasets for exploratory analysis
#uncomment and run indicated lines below to see rest of results at each step of quality thresholding
# untrimmed dataset (full dataset post-mothur, no OTUs or samples were omitted)
#this code is used in main analysis for diversity metrics and is replicated above
#uncomment and run this chunk of code to see results for untrimmed dataset
otu_raw <- read.table("WholeLung_v_BALF.shared", row.names = 2, header = T, stringsAsFactors = T)
otu_trim <- otu_raw[, -c(1:2)] # remove unnecessary columns
otu_untrimmed <- as.matrix(otu_trim) # convert to matrix
rownames(otu_untrimmed) <- str_remove(rownames(otu_untrimmed), "_S\\d+") # clean up sample names
otu_untrimmed <- as.data.frame(otu_untrimmed) # convert to dataframe
dim(otu_untrimmed) # inspect data #[1]  120 3391
otu_good <- otu_untrimmed
otu_untrimmed_taxonomy <- load_tax("WholeLung_v_BALF.cons.taxonomy", otu_good = otu_untrimmed)
dim(otu_untrimmed_taxonomy)
otu_good_taxonomy <- otu_untrimmed_taxonomy
#[1]  3391    7
# trimmed dataset (dataset post-mothur that has been trimmed to omit OTUs < 0.1% of the sample population)
#uncomment and run this chunk of code to see results for trimmed dataset
# otu_good <- load_shared("WholeLung_v_BALF.shared")
# rownames(otu_good) <- str_remove(rownames(otu_good), "_S\\d+_L001_R1_001") %>% str_remove("_S\\d+_L001_R1")
# dim(otu_good) #[1] 120 773
# otu_good <- as.data.frame(otu_good)
# quality-checked dataset (dataset post-mothur, OTUs >0.1% of each sample population, and filtered out samples < 100 reads)
# this is the final dataset used in the main analysis - no extra code needed
# Convert OTU counts to percentages and create metadata from sample names
otu_df <- data.frame(decostand(otu_good, "total") * 100) %>%
mutate(Sample = rownames(otu_good)) %>%
mutate(Sample_Type = factor(case_when(
str_detect(Sample, "^WVB_BAL") ~ "BAL",
str_detect(Sample, "^WVB_HomogCtrl") ~ "Homog_Ctrl",
str_detect(Sample, "^WVB_Lung") ~ "Lung",
str_detect(Sample, "^AE_") ~ "AE",
str_detect(Sample, "^Blank_") ~ "Empty",
str_detect(Sample, "J_IsoCtrl") ~ "Iso_Ctrl",
str_detect(Sample, "^Water") ~ "Water",
str_detect(Sample, "^ZymoMock") ~ "Mock",
str_detect(Sample, "^WVB_CLEAN_RINSE") ~ "Clean_Rinse",
str_detect(Sample, "^WVB_USED_RINSE") ~ "Used_Rinse",
str_detect(Sample, "^WVB_PBS") ~ "PBS",
str_detect(Sample, "^WVB_Tongue") ~ "Tongue",
str_detect(Sample, "WVB_Cecum") ~ "Cecum"
), levels = c("BAL", "Lung", "AE", "Empty", "Iso_Ctrl", "Water", "Mock", "Homog_Ctrl", "PBS", "Clean_Rinse", "Used_Rinse", "Tongue", "Cecum")
)
) %>%
mutate(Sample_Type2 = factor(case_when(
str_detect(Sample, "BAL_") ~ "BAL",
str_detect(Sample, "Lung_") ~ "Lung",
str_detect(Sample, "PBS_") ~ "PBS",
str_detect(Sample, "HomogCtrl_") ~ "Homog_Ctrl",
str_detect(Sample, "_RINSE") ~ "Syringe_Rinse",
str_detect(Sample, "IsoCtrl") ~ "Iso_Ctrl",
str_detect(Sample, "^AE_") ~ "AE",
str_detect(Sample, "^Blank_") ~ "Empty",
str_detect(Sample, "^Water") ~ "Water",
str_detect(Sample, "^ZymoMock") ~ "Mock",
str_detect(Sample, "^WVB_Tongue") ~ "Tongue",
str_detect(Sample, "WVB_Cecum") ~ "Cecum"
)
)
) %>%
mutate(RA_Groups = factor(case_when(
str_detect(Sample_Type, "Lung") ~ "Lung",
str_detect(Sample_Type, "BAL") ~ "BAL",
str_detect(Sample_Type,
"AE|Iso_Ctrl|Empty|Water|PBS|Clean|Used|Homog") ~ "Negative Control"))) %>%
mutate(Organ = factor(case_when(
str_detect(Sample_Type, "Cecum") ~ "Cecum",
str_detect(Sample_Type, "BAL") ~ "Lung",
str_detect(Sample_Type, "Tongue") ~ "Tongue",
str_detect(Sample_Type, "Lung") ~ "Lung",
str_detect(Sample_Type, "Homog_Ctrl") ~ "Sampling Control",
str_detect(Sample_Type, "PBS") ~ "Sampling Control",
str_detect(Sample_Type, "Clean_Rinse") ~ "Sampling Control",
str_detect(Sample_Type, "Used_Rinse") ~ "Sampling Control",
str_detect(Sample_Type, "AE") ~ "Isolation Control",
str_detect(Sample_Type, "Iso_Ctrl") ~ "Isolation Control",
str_detect(Sample_Type, "Water") ~ "Sequencing Control",
str_detect(Sample_Type, "Mock") ~ "Sequencing Control",
str_detect(Sample_Type, "Empty") ~ "Sequencing Control"
),
)
) %>%
mutate(Blank_Plate = factor(case_when(
str_detect(Sample, "^Blank_C_") ~ "Plate C",
str_detect(Sample, "^Blank_D_") ~ "Plate D"
),
)
) %>%
mutate(Cage = factor(case_when(
str_detect(Sample, "_B[1|2]$") ~ "Cage A",
str_detect(Sample, "_L[1|2|3]$") ~ "Cage A",
str_detect(Sample, "_B[3|4]$") ~ "Cage B",
str_detect(Sample, "_L[4|5|6]$") ~ "Cage B",
str_detect(Sample, "_B[5|6|7]$") ~ "Cage C",
str_detect(Sample, "_L[7|8]$") ~ "Cage C",
str_detect(Sample, "_B[8|9]$") ~ "Cage D",
str_detect(Sample, "_[B|L]10$") ~ "Cage D",
str_detect(Sample, "_L9$") ~ "Cage D"
),
)
) %>%
mutate(Experiment = factor(case_when(
str_detect(Sample, "_B\\d+$") ~ "BAL",
str_detect(Sample, "_L\\d+$") ~ "Lung"
))) %>%
# organize dataframe - metadata columns first, followed by all of the count data
dplyr::select(Sample:Experiment, everything())
# note that the data is in wide format
# add miSeq read counts to otu_df
otu_df <- left_join(otu_df, miseq_reads, by = c("Sample" = "Final.Sample.Name")) %>% dplyr::select(Sample:Experiment, Reads.PF.Sample, everything())
# add ddPCR 16S quantification data to otu_df
ddpcr <- ungroup(ddpcr)
ddpcr_join <- dplyr::select(ddpcr, Sample, Gene_16S_copies_per_mL)
otu_df <- left_join(otu_df, ddpcr_join, by = "Sample") %>%
dplyr::select(Sample:Reads.PF.Sample, Gene_16S_copies_per_mL, everything())
#prepare data for plotting
reads.by.sample.type.df <- otu_df
reads.by.sample.type.df$Sample_Type2 <- factor(reads.by.sample.type.df$Sample_Type2,
levels = c("Mock", "Water", "Empty", "AE", "Iso_Ctrl", "PBS", "Syringe_Rinse", "Homog_Ctrl", "BAL", "Lung", "Tongue", "Cecum"))
#plot number of MiSeq reads by sample type
ggplot(reads.by.sample.type.df, aes(x=Sample_Type2, y=Reads.PF.Sample)) +
geom_boxplot(aes(fill = Sample_Type2), show.legend=FALSE) +
geom_point() +
theme_classic() +
scale_y_log10(
limits = c(10^0, 10^6),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)), expand = c(0,0)) +
theme(axis.text.y = element_text(size=20),
axis.text.x = element_text(size=15),
axis.title.y = element_text(size=20, face="bold", angle = 0, vjust=0.5),
axis.title.x = element_text(size=20, face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) +
ylab("MiSeq\nReads") +
xlab("\nSample Type")
View(reads.by.sample.type.df)
reads.by.sample.type.df$Sample_Type2 <- factor(reads.by.sample.type.df$Sample_Type2,
levels = c("Mock", "Water", "Empty", "AE", "Iso_Ctrl", "PBS", "Syringe_Rinse", "Homog_Ctrl", "BAL", "Lung", "Tongue", "Cecum"))
#plot number of MiSeq reads by sample type
ggplot(reads.by.sample.type.df, aes(x=Sample_Type2, y=Reads.PF.Sample)) +
geom_boxplot(aes(fill = Sample_Type2), show.legend=FALSE) +
geom_point() +
theme_classic() +
scale_y_log10(
limits = c(10^0, 10^6),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)), expand = c(0,0)) +
theme(axis.text.y = element_text(size=20),
axis.text.x = element_text(size=15),
axis.title.y = element_text(size=20, face="bold", angle = 0, vjust=0.5),
axis.title.x = element_text(size=20, face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) +
ylab("MiSeq\nReads") +
xlab("\nSample Type")
knitr::opts_chunk$set(echo = FALSE, # whether code should be displayed in document
cache = TRUE, # whether to cache results of code chunks for future knits
fig.align = 'left', # alignment options: 'left', 'right', 'center', 'default'
error = TRUE, # display error messages in document (TRUE) or stop render on error (FALSE)
warning = FALSE,
message=FALSE,
comment = FALSE,
results= "hold"
)
# Libaries used in this analysis
# I. universal data wrangling and visualization
library(tidyverse)      # ggplot, dplyr, purrr, forcats, stringr, etc. See https://tidyverse.tidyverse.org/
library(tidyselect)     # useful for subsetting dataframes
# II. formatting, plotting
library(scales)         # used in formatting relative abundance % labels; dollar_format()
library(knitr)          # necessary for kable, for displaying nicer tables in html/pdf output
library(RColorBrewer)   # for generating custom palettes
library(ggplot2)        # customizable data visualization
library(ggpubr)         # data visualization, built on ggplot2
# III. analysis packages
library(vegan)          # decostand(), metaMDS(), scores(), rda(), ordispider(), adonis()
# IV. functions for automating and streamlining workflow
#library(devtools)
#devtools::install_github("https://github.com/cb-42/cbmbtools")
library(cbmbtools)
#V. Rmarkdown formatting
library(pander)
library(tadaatoolbox)
pander(sessionInfo())
# functions for computing summary statistics; from John
# Error bar helper
sem <- function(x){
sqrt(var(x, na.rm = TRUE)/length(na.omit(x)))
}
ddpcr <- read.csv("WholeLung_v_BALF_16S_ddPCR_quantification.csv", header=T, stringsAsFactors = T)
colnames(ddpcr) <- c("Sample", "Gene_16S_copies_per_mL")
ddpcr <- mutate(ddpcr, Sample_Type = factor(case_when(
str_detect(Sample, "BAL_") ~ "BAL",
str_detect(Sample, "Lung_") ~ "Lung",
str_detect(Sample, "PBS_") ~ "PBS",
str_detect(Sample, "HomogCtrl_") ~ "Homog_Ctrl",
str_detect(Sample, "_RINSE") ~ "Syringe_Rinse",
str_detect(Sample, "IsoCtrl") ~ "Iso_Ctrl",
str_detect(Sample, "NTC") ~ "NTC"
), levels = c("NTC", "Iso_Ctrl", "PBS", "Syringe_Rinse", "Homog_Ctrl", "BAL", "Lung")
)
) %>%
dplyr::select(Sample_Type, everything())
#data prep
ddpcr <- ddpcr %>% group_by(Sample_Type)
ddpcr.summary <- summarize(ddpcr,
Mean=mean(Gene_16S_copies_per_mL),
SEM=sqrt(var(Gene_16S_copies_per_mL)/length(Gene_16S_copies_per_mL)))
ggplot(ddpcr, aes(x=Sample_Type)) +
geom_col(data=ddpcr.summary, aes(x=Sample_Type, y=Mean, fill=Sample_Type), color= "black", show.legend = FALSE) +
geom_point(aes(x=Sample_Type, y=Gene_16S_copies_per_mL)) +
geom_errorbar(data=ddpcr.summary, aes(ymin = Mean-SEM, ymax = Mean+SEM, width = 0.3)) +
theme_classic() +
scale_y_log10(
limits = c(10^0, 10^6),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)), expand = c(0,0)) +
theme(axis.text.y = element_text(size=12),
axis.text.x = element_text(size=10),
axis.title.y = element_text(size=12, face="bold", angle = 0, vjust=0.5),
axis.title.x = element_text(size=12, face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) +
ylab("16S rRNA Gene\nCopies/mL") +
xlab("\nSample Type")
knitr::opts_chunk$set(echo = FALSE, # whether code should be displayed in document
cache = TRUE, # whether to cache results of code chunks for future knits
fig.align = 'left', # alignment options: 'left', 'right', 'center', 'default'
error = TRUE, # display error messages in document (TRUE) or stop render on error (FALSE)
warning = FALSE,
message=FALSE,
comment = FALSE,
results= "hold"
)
# Libaries used in this analysis
# I. universal data wrangling and visualization
library(tidyverse)      # ggplot, dplyr, purrr, forcats, stringr, etc. See https://tidyverse.tidyverse.org/
library(tidyselect)     # useful for subsetting dataframes
# II. formatting, plotting
library(scales)         # used in formatting relative abundance % labels; dollar_format()
library(knitr)          # necessary for kable, for displaying nicer tables in html/pdf output
library(RColorBrewer)   # for generating custom palettes
library(ggplot2)        # customizable data visualization
library(ggpubr)         # data visualization, built on ggplot2
# III. analysis packages
library(vegan)          # decostand(), metaMDS(), scores(), rda(), ordispider(), adonis()
# IV. functions for automating and streamlining workflow
#library(devtools)
#devtools::install_github("https://github.com/cb-42/cbmbtools")
library(cbmbtools)
#V. Rmarkdown formatting
library(pander)
library(tadaatoolbox)
pander(sessionInfo())
# functions for computing summary statistics; from John
# Error bar helper
sem <- function(x){
sqrt(var(x, na.rm = TRUE)/length(na.omit(x)))
}
ddpcr <- read.csv("WholeLung_v_BALF_16S_ddPCR_quantification.csv", header=T, stringsAsFactors = T)
colnames(ddpcr) <- c("Sample", "Gene_16S_copies_per_mL")
ddpcr <- mutate(ddpcr, Sample_Type = factor(case_when(
str_detect(Sample, "BAL_") ~ "BAL",
str_detect(Sample, "Lung_") ~ "Lung",
str_detect(Sample, "PBS_") ~ "PBS",
str_detect(Sample, "HomogCtrl_") ~ "Homog_Ctrl",
str_detect(Sample, "_RINSE") ~ "Syringe_Rinse",
str_detect(Sample, "IsoCtrl") ~ "Iso_Ctrl",
str_detect(Sample, "NTC") ~ "NTC"
), levels = c("NTC", "Iso_Ctrl", "PBS", "Syringe_Rinse", "Homog_Ctrl", "BAL", "Lung")
)
) %>%
dplyr::select(Sample_Type, everything())
#data prep
ddpcr <- ddpcr %>% group_by(Sample_Type)
ddpcr.summary <- summarize(ddpcr,
Mean=mean(Gene_16S_copies_per_mL),
SEM=sqrt(var(Gene_16S_copies_per_mL)/length(Gene_16S_copies_per_mL)))
ggplot(ddpcr, aes(x=Sample_Type)) +
geom_col(data=ddpcr.summary, aes(x=Sample_Type, y=Mean, fill=Sample_Type), color= "black", show.legend = FALSE) +
geom_point(aes(x=Sample_Type, y=Gene_16S_copies_per_mL)) +
geom_errorbar(data=ddpcr.summary, aes(ymin = Mean-SEM, ymax = Mean+SEM, width = 0.3)) +
theme_classic() +
scale_y_log10(
limits = c(10^0, 10^6),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)), expand = c(0,0)) +
theme(axis.text.y = element_text(size=12),
axis.text.x = element_text(size=10),
axis.title.y = element_text(size=12, face="bold", angle = 0, vjust=0.5),
axis.title.x = element_text(size=12, face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) +
ylab("16S rRNA Gene\nCopies/mL") +
xlab("\nSample Type")
